{"version":3,"names":["_common","require","_metrics","_interopRequireDefault","_constants","_loggerProxy","_constants2","TURN_DISCOVERY_TIMEOUT","TurnDiscovery","roapRequest","_classCallCheck2","default","_defineProperty2","turnInfo","url","username","password","_createClass2","key","value","waitForTurnDiscoveryResponse","defer","LoggerProxy","logger","warn","_promise","reject","Error","responseTimer","setTimeout","concat","info","promise","handleTurnDiscoveryResponse","roapMessage","_this","headers","expectedHeaders","headerName","field","foundHeaders","forEach","receivedHeader","expectedHeader","startsWith","substring","length","clearTimeout","undefined","_stringify","resolve","sendRoapTurnDiscoveryRequest","meeting","isReconnecting","_meeting$audio","_meeting$video","seq","roapSeq","Defer","messageType","ROAP","ROAP_TYPES","TURN_DISCOVERY_REQUEST","version","ROAP_VERSION","sendRoap","correlationId","locusSelfUrl","selfUrl","mediaId","audioMuted","audio","isLocallyMuted","videoMuted","video","meetingId","id","then","_ref","mediaConnections","setRoapSeq","updateMediaConnections","sendRoapOK","_meeting$audio2","_meeting$video2","OK","doTurnDiscovery","_this2","isAnyClusterReachable","webex","meetings","reachability","turnServerInfo","turnDiscoverySkippedReason","config","experimental","enableTurnDiscovery","catch","e","Metrics","sendBehavioralMetric","BEHAVIORAL_METRICS","TURN_DISCOVERY_FAILURE","correlation_id","locus_id","locusUrl","split","pop","reason","message","stack","exports"],"sources":["turnDiscovery.ts"],"sourcesContent":["// @ts-ignore - Types not available for @webex/common\nimport {Defer} from '@webex/common';\n\nimport Metrics from '../metrics';\nimport BEHAVIORAL_METRICS from '../metrics/constants';\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport {ROAP} from '../constants';\n\nimport RoapRequest from './request';\nimport Meeting from '../meeting';\n\nconst TURN_DISCOVERY_TIMEOUT = 10; // in seconds\n\n/**\n * Handles the process of finding out TURN server information from Linus.\n * This is achieved by sending a TURN_DISCOVERY_REQUEST.\n */\nexport default class TurnDiscovery {\n  private roapRequest: RoapRequest;\n\n  private defer?: Defer; // used for waiting for the response\n\n  private turnInfo: {\n    url: string;\n    username: string;\n    password: string;\n  };\n\n  private responseTimer?: ReturnType<typeof setTimeout>;\n\n  /**\n   * Constructor\n   *\n   * @param {RoapRequest} roapRequest\n   */\n  constructor(roapRequest: RoapRequest) {\n    this.roapRequest = roapRequest;\n    this.turnInfo = {\n      url: '',\n      username: '',\n      password: '',\n    };\n  }\n\n  /**\n   * waits for TURN_DISCOVERY_RESPONSE message to arrive\n   *\n   * @returns {Promise}\n   * @private\n   * @memberof Roap\n   */\n  private waitForTurnDiscoveryResponse() {\n    if (!this.defer) {\n      LoggerProxy.logger.warn(\n        'Roap:turnDiscovery#waitForTurnDiscoveryResponse --> TURN discovery is not in progress'\n      );\n\n      return Promise.reject(\n        new Error('waitForTurnDiscoveryResponse() called before sendRoapTurnDiscoveryRequest()')\n      );\n    }\n\n    const {defer} = this;\n\n    this.responseTimer = setTimeout(() => {\n      LoggerProxy.logger.warn(\n        `Roap:turnDiscovery#waitForTurnDiscoveryResponse --> timeout! no response arrived within ${TURN_DISCOVERY_TIMEOUT} seconds`\n      );\n\n      defer.reject(new Error('Timed out waiting for TURN_DISCOVERY_RESPONSE'));\n    }, TURN_DISCOVERY_TIMEOUT * 1000);\n\n    LoggerProxy.logger.info(\n      'Roap:turnDiscovery#waitForTurnDiscoveryResponse --> waiting for TURN_DISCOVERY_RESPONSE...'\n    );\n\n    return defer.promise;\n  }\n\n  /**\n   * handles TURN_DISCOVERY_RESPONSE roap message\n   *\n   * @param {Object} roapMessage\n   * @returns {void}\n   * @public\n   * @memberof Roap\n   */\n  public handleTurnDiscoveryResponse(roapMessage: object) {\n    // @ts-ignore - Fix missing type\n    const {headers} = roapMessage;\n\n    if (!this.defer) {\n      LoggerProxy.logger.warn(\n        'Roap:turnDiscovery#handleTurnDiscoveryResponse --> unexpected TURN discovery response'\n      );\n\n      return;\n    }\n\n    const expectedHeaders = [\n      {headerName: 'x-cisco-turn-url', field: 'url'},\n      {headerName: 'x-cisco-turn-username', field: 'username'},\n      {headerName: 'x-cisco-turn-password', field: 'password'},\n    ];\n\n    let foundHeaders = 0;\n\n    headers?.forEach((receivedHeader) => {\n      // check if it matches any of our expected headers\n      expectedHeaders.forEach((expectedHeader) => {\n        if (receivedHeader.startsWith(`${expectedHeader.headerName}=`)) {\n          this.turnInfo[expectedHeader.field] = receivedHeader.substring(\n            expectedHeader.headerName.length + 1\n          );\n          foundHeaders += 1;\n        }\n      });\n    });\n\n    clearTimeout(this.responseTimer);\n    this.responseTimer = undefined;\n\n    if (foundHeaders !== expectedHeaders.length) {\n      LoggerProxy.logger.warn(\n        `Roap:turnDiscovery#handleTurnDiscoveryResponse --> missing some headers, received: ${JSON.stringify(\n          headers\n        )}`\n      );\n      this.defer.reject(\n        new Error(`TURN_DISCOVERY_RESPONSE missing some headers: ${JSON.stringify(headers)}`)\n      );\n    } else {\n      LoggerProxy.logger.info(\n        `Roap:turnDiscovery#handleTurnDiscoveryResponse --> received a valid response, url=${this.turnInfo.url}`\n      );\n      this.defer.resolve();\n    }\n  }\n\n  /**\n   * sends the TURN_DISCOVERY_REQUEST roap request\n   *\n   * @param {Meeting} meeting\n   * @param {Boolean} isReconnecting\n   * @returns {Promise}\n   * @private\n   * @memberof Roap\n   */\n  private sendRoapTurnDiscoveryRequest(meeting: Meeting, isReconnecting: boolean) {\n    const seq = meeting.roapSeq + 1;\n\n    if (this.defer) {\n      LoggerProxy.logger.warn(\n        'Roap:turnDiscovery#sendRoapTurnDiscoveryRequest --> already in progress'\n      );\n\n      return Promise.resolve();\n    }\n\n    this.defer = new Defer();\n\n    const roapMessage = {\n      messageType: ROAP.ROAP_TYPES.TURN_DISCOVERY_REQUEST,\n      version: ROAP.ROAP_VERSION,\n      seq,\n    };\n\n    LoggerProxy.logger.info(\n      'Roap:turnDiscovery#sendRoapTurnDiscoveryRequest --> sending TURN_DISCOVERY_REQUEST'\n    );\n\n    return this.roapRequest\n      .sendRoap({\n        roapMessage,\n        correlationId: meeting.correlationId,\n        // @ts-ignore - Fix missing type\n        locusSelfUrl: meeting.selfUrl,\n        // @ts-ignore - Fix missing type\n        mediaId: isReconnecting ? '' : meeting.mediaId,\n        audioMuted: meeting.audio?.isLocallyMuted(),\n        videoMuted: meeting.video?.isLocallyMuted(),\n        meetingId: meeting.id,\n      })\n      .then(({mediaConnections}) => {\n        meeting.setRoapSeq(seq);\n\n        if (mediaConnections) {\n          meeting.updateMediaConnections(mediaConnections);\n        }\n      });\n  }\n\n  /**\n   * Sends the OK message that server expects to receive\n   * after it sends us TURN_DISCOVERY_RESPONSE\n   *\n   * @param {Meeting} meeting\n   * @returns {Promise}\n   */\n  sendRoapOK(meeting: Meeting) {\n    LoggerProxy.logger.info('Roap:turnDiscovery#sendRoapOK --> sending OK');\n\n    return this.roapRequest.sendRoap({\n      roapMessage: {\n        messageType: ROAP.ROAP_TYPES.OK,\n        version: ROAP.ROAP_VERSION,\n        seq: meeting.roapSeq,\n      },\n      // @ts-ignore - fix type\n      locusSelfUrl: meeting.selfUrl,\n      // @ts-ignore - fix type\n      mediaId: meeting.mediaId,\n      correlationId: meeting.correlationId,\n      audioMuted: meeting.audio?.isLocallyMuted(),\n      videoMuted: meeting.video?.isLocallyMuted(),\n      meetingId: meeting.id,\n    });\n  }\n\n  /**\n   * Retrieves TURN server information from the backend by doing\n   * a roap message exchange:\n   * client                             server\n   *  | -----TURN_DISCOVERY_REQUEST-----> |\n   *  | <----TURN_DISCOVERY_RESPONSE----- |\n   *  | --------------OK----------------> |\n   *\n   * @param {Meeting} meeting\n   * @param {Boolean} isReconnecting should be set to true if this is a new\n   *                                 media connection just after a reconnection\n   * @returns {Promise}\n   */\n  doTurnDiscovery(meeting: Meeting, isReconnecting?: boolean) {\n    // @ts-ignore - fix type\n    const isAnyClusterReachable = meeting.webex.meetings.reachability.isAnyClusterReachable();\n\n    if (isAnyClusterReachable) {\n      LoggerProxy.logger.info(\n        'Roap:turnDiscovery#doTurnDiscovery --> reachability has not failed, skipping TURN discovery'\n      );\n\n      return Promise.resolve({\n        turnServerInfo: undefined,\n        turnDiscoverySkippedReason: 'reachability',\n      });\n    }\n\n    // @ts-ignore - fix type\n    if (!meeting.config.experimental.enableTurnDiscovery) {\n      LoggerProxy.logger.info(\n        'Roap:turnDiscovery#doTurnDiscovery --> TURN discovery disabled in config, skipping it'\n      );\n\n      return Promise.resolve({turnServerInfo: undefined, turnDiscoverySkippedReason: 'config'});\n    }\n\n    return this.sendRoapTurnDiscoveryRequest(meeting, isReconnecting)\n      .then(() => this.waitForTurnDiscoveryResponse())\n      .then(() => this.sendRoapOK(meeting))\n      .then(() => {\n        this.defer = undefined;\n\n        LoggerProxy.logger.info('Roap:turnDiscovery#doTurnDiscovery --> TURN discovery completed');\n\n        return {turnServerInfo: this.turnInfo, turnDiscoverySkippedReason: undefined};\n      })\n      .catch((e) => {\n        // we catch any errors and resolve with no turn information so that the normal call join flow can continue without TURN\n        LoggerProxy.logger.info(\n          `Roap:turnDiscovery#doTurnDiscovery --> TURN discovery failed, continuing without TURN: ${e}`\n        );\n\n        Metrics.sendBehavioralMetric(BEHAVIORAL_METRICS.TURN_DISCOVERY_FAILURE, {\n          correlation_id: meeting.correlationId,\n          locus_id: meeting.locusUrl.split('/').pop(),\n          reason: e.message,\n          stack: e.stack,\n        });\n\n        return Promise.resolve({turnServerInfo: undefined, turnDiscoverySkippedReason: undefined});\n      });\n  }\n}\n"],"mappings":"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"}