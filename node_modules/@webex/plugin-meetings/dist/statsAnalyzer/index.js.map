{"version":3,"names":["_eventsScope","_interopRequireDefault","require","_constants","_config","_loggerProxy","_global","_mqaUtil","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","default","result","NewTarget","constructor","_Reflect$construct","arguments","apply","_possibleConstructorReturn2","Reflect","sham","Proxy","Boolean","prototype","valueOf","call","e","EVENTS","MEDIA_QUALITY","LOCAL_MEDIA_STARTED","LOCAL_MEDIA_STOPPED","REMOTE_MEDIA_STARTED","REMOTE_MEDIA_STOPPED","exports","StatsAnalyzer","_EventsScope","_inherits2","_super","config","_this","networkQualityMonitor","length","undefined","statsResults","defaultStats","_classCallCheck2","_defineProperty2","_assertThisInitialized2","mediaType","previousValue","currentValue","isLocal","Error","concat","lastEmittedEvent","lastEmittedStartStopEvent","local","remote","newEvent","emit","file","function","type","isSender","isRemote","id","RemoteCandidateType","RemoteTransport","RemoteIpAddress","RemoteNetworkType","sendRecvType","STATS","SEND_DIRECTION","RECEIVE_DIRECTION","ipType","REMOTE","LOCAL","candidateType","indexOf","push","protocol","toUpperCase","ip","portNumber","networkType","internal","candidates","ipAddress","port","priority","transport","timestamp","time","connectionType","NETWORK_TYPE","VPN","UNKNOWN","totalRoundTripTime","statsStarted","lastStatsResults","correlationId","mqaSentCount","lastMqaDataSent","resolutions","video","send","recv","audio","share","localMQEStats","RX","packetsLost","jitter","latency","bitRate","TX","frameRate","resolutionWidth","resolutionHeight","requestedKeyFrame","receivedKeyFrame","_createClass2","key","value","populateResults","lastMqa","audioReceive","common","mediaHopByHopLost","streams","rtpJitter","roundTripTime","receivedBitrate","audioTransmit","remoteLossRate","remoteJitter","transmittedBitrate","videoReceive","receivedFrameRate","receivedWidth","receivedHeight","videoTransmit","transmittedFrameRate","transmittedWidth","transmittedHeight","requestedKeyFrames","resetStatsResults","meanRemoteJitter","meanRtpJitter","meanRoundTripTime","updateMediaStatus","status","meetingMediaStatus","sendMqaData","_this$peerConnection","_this$peerConnection$","_this$peerConnection$2","_this$peerConnection$3","_this$peerConnection2","_this$peerConnection3","_this$peerConnection4","_this$peerConnection5","audioReceiver","mqaData","intervals","audioSender","videoReceiver","videoSender","shareSender","shareReceiver","getAudioSenderMqa","getAudioReceiverMqa","getVideoReceiverMqa","getVideoSenderMqa","isShareStream","intervalMetadata","peerReflexiveIP","peripherals","information","_UNKNOWN_","name","MEDIA_DEVICES","SPEAKER","peerConnection","audioTransceiver","sender","track","label","MICROPHONE","videoTransceiver","CAMERA","intervalNumber","_cloneDeep2","data","updatePeerconnection","startAnalyzer","_this2","getStatsAndParse","then","statsInterval","setInterval","analyzerInterval","mqaInterval","MQA_INTEVAL","_promise","resolve","stopAnalyzer","_this3","sendOneLastMqa","clearInterval","parseGetStatsResult","getStatsResult","processOutboundRTPResult","processInboundRTPResult","processTrackResult","compareSentAndReceived","parseCandidate","parseAudioSource","filterAndParseGetStatsResults","getStatsResults","_this4","types","DEFAULT_GET_STATS_FILTER","forEach","includes","AUDIO_CORRELATE","audioLevel","totalAudioEnergy","compareLastStatsResult","currentStats","previousStats","expected","sendAudio","totalPacketsSent","LoggerProxy","logger","info","emitStartStopEvents","receiveAudio","totalPacketsReceived","totalSamplesReceived","VIDEO_CORRELATE","sendVideo","framesEncoded","framesSent","receiveVideo","framesReceived","framesDecoded","framesDropped","SHARE_CORRELATE","sendShare","_this5","connectionState","CONNECTION_STATE","FAILED","trace","all","getStats","res","receiver","shareTransceiver","direction","currentDirection","JSON","parse","_stringify","sendrecvType","bytesSent","kilobytes","prevBytesSent","keyFramesEncoded","bytes","availableBandwidth","toFixed","outboundRtpId","packetsSent","totalKeyFramesEncoded","totalNackCount","nackCount","totalPliCount","pliCount","totalFirCount","firCount","encoderImplementation","qualityLimitationReason","qualityLimitationResolutionChanges","retransmittedPacketsSent","totalBytesSent","headerBytesSent","retransmittedBytesSent","bytesReceived","prevBytesReceived","packetsReceived","lastPacketReceivedTimestamp","currentPacketsLost","currentPacketLossRatio","totalPacketsLost","keyFramesDecoded","decoderImplementation","fecPacketsDiscarded","fecPacketsReceived","totalBytesReceived","headerBytesReceived","totalSamplesDecoded","concealedSamples","remoteSource","frameWidth","frameHeight","width","height","hugeFramesSent","trackIdentifier","jitterBufferDelay","jitterBufferEmittedCount","avgJitterDelay","totalPacketsLostOnReceiver","currentPacketLoss","packetsLostOnReceiver","ssrc","reportsReceived","overAllPacketLossRatio","maxPacketLossRatio","determineUplinkNetworkQuality","remoteRtpResults","statsAnalyzerCurrentStats","EventsScope"],"sources":["index.ts"],"sourcesContent":["/* eslint-disable prefer-destructuring */\n\nimport {cloneDeep} from 'lodash';\n\nimport EventsScope from '../common/events/events-scope';\nimport {\n  DEFAULT_GET_STATS_FILTER,\n  CONNECTION_STATE,\n  STATS,\n  MQA_INTEVAL,\n  NETWORK_TYPE,\n  MEDIA_DEVICES,\n  _UNKNOWN_,\n} from '../constants';\nimport mqaData from '../mediaQualityMetrics/config';\nimport LoggerProxy from '../common/logs/logger-proxy';\n\nimport defaultStats from './global';\nimport {\n  getAudioSenderMqa,\n  getAudioReceiverMqa,\n  getVideoSenderMqa,\n  getVideoReceiverMqa,\n} from './mqaUtil';\n\nexport const EVENTS = {\n  MEDIA_QUALITY: 'MEDIA_QUALITY',\n  LOCAL_MEDIA_STARTED: 'LOCAL_MEDIA_STARTED',\n  LOCAL_MEDIA_STOPPED: 'LOCAL_MEDIA_STOPPED',\n  REMOTE_MEDIA_STARTED: 'REMOTE_MEDIA_STARTED',\n  REMOTE_MEDIA_STOPPED: 'REMOTE_MEDIA_STOPPED',\n};\n\n/**\n * Stats Analyzer class that will emit events based on detected quality\n *\n * @export\n * @class StatsAnalyzer\n * @extends {EventsScope}\n */\nexport class StatsAnalyzer extends EventsScope {\n  config: any;\n  correlationId: any;\n  lastEmittedStartStopEvent: any;\n  lastMqaDataSent: any;\n  lastStatsResults: any;\n  localMQEStats: any;\n  meetingMediaStatus: any;\n  mqaInterval: NodeJS.Timeout;\n  mqaSentCount: any;\n  networkQualityMonitor: any;\n  peerConnection: any;\n  statsInterval: NodeJS.Timeout;\n  statsResults: any;\n  statsStarted: any;\n\n  /**\n   * Creates a new instance of StatsAnalyzer\n   * @constructor\n   * @public\n   * @param {Object} config SDK Configuration Object\n   * @param {Object} networkQualityMonitor class for assessing network characteristics (jitter, packetLoss, latency)\n   * @param {Object} statsResults Default properties for stats\n   */\n  constructor(\n    config: any,\n    networkQualityMonitor: object = {},\n    statsResults: object = defaultStats\n  ) {\n    super();\n    this.statsStarted = false;\n    this.statsResults = statsResults;\n    this.lastStatsResults = null;\n    this.config = config;\n    this.networkQualityMonitor = networkQualityMonitor;\n    this.correlationId = config.correlationId;\n    this.mqaSentCount = -1;\n    this.lastMqaDataSent = {\n      resolutions: {\n        video: {send: {}, recv: {}},\n        audio: {send: {}, recv: {}},\n        share: {send: {}, recv: {}},\n      },\n      video: {send: {}, recv: {}},\n      audio: {send: {}, recv: {}},\n      share: {send: {}, recv: {}},\n    };\n    this.localMQEStats = {\n      audio: {\n        RX: {\n          packetsLost: [],\n          jitter: [],\n          latency: [],\n          bitRate: [],\n        },\n        TX: {\n          packetsLost: [],\n          jitter: [],\n          latency: [],\n          bitRate: [],\n        },\n      },\n      video: {\n        RX: {\n          packetsLost: [],\n          jitter: [],\n          latency: [],\n          bitRate: [],\n          frameRate: [],\n          resolutionWidth: [],\n          resolutionHeight: [],\n          requestedKeyFrame: [],\n          receivedKeyFrame: [],\n        },\n        TX: {\n          packetsLost: [],\n          jitter: [],\n          latency: [],\n          bitRate: [],\n          frameRate: [],\n          resolutionWidth: [],\n          resolutionHeight: [],\n          requestedKeyFrame: [],\n          receivedKeyFrame: [],\n        },\n      },\n    };\n    this.lastEmittedStartStopEvent = {\n      audio: {\n        local: undefined,\n        remote: undefined,\n      },\n      video: {\n        local: undefined,\n        remote: undefined,\n      },\n      share: {\n        local: undefined,\n        remote: undefined,\n      },\n    };\n  }\n\n  populateResults(lastMqa) {\n    // Audio\n\n    this.localMQEStats.audio.RX.packetsLost.push(lastMqa.audioReceive[0].common.mediaHopByHopLost);\n    this.localMQEStats.audio.RX.jitter.push(lastMqa.audioReceive[0].streams[0].common.rtpJitter);\n    this.localMQEStats.audio.RX.latency.push(lastMqa.audioReceive[0].common.roundTripTime);\n    this.localMQEStats.audio.RX.bitRate.push(\n      lastMqa.audioReceive[0].streams[0].common.receivedBitrate\n    );\n\n    this.localMQEStats.audio.TX.packetsLost.push(lastMqa.audioTransmit[0].common.remoteLossRate);\n    this.localMQEStats.audio.TX.jitter.push(lastMqa.audioTransmit[0].common.remoteJitter);\n    this.localMQEStats.audio.TX.latency.push(lastMqa.audioTransmit[0].common.roundTripTime);\n    this.localMQEStats.audio.TX.bitRate.push(\n      lastMqa.audioTransmit[0].streams[0].common.transmittedBitrate\n    );\n\n    // Video\n\n    this.localMQEStats.video.RX.packetsLost.push(lastMqa.videoReceive[0].common.mediaHopByHopLost);\n    this.localMQEStats.video.RX.jitter.push(lastMqa.videoReceive[0].streams[0].common.rtpJitter);\n    this.localMQEStats.video.RX.latency.push(\n      lastMqa.videoReceive[0].streams[0].common.roundTripTime\n    );\n    this.localMQEStats.video.RX.bitRate.push(\n      lastMqa.videoReceive[0].streams[0].common.receivedBitrate\n    );\n    this.localMQEStats.video.RX.frameRate.push(\n      lastMqa.videoReceive[0].streams[0].common.receivedFrameRate\n    );\n    this.localMQEStats.video.RX.resolutionWidth.push(\n      lastMqa.videoReceive[0].streams[0].receivedWidth\n    );\n    this.localMQEStats.video.RX.resolutionHeight.push(\n      lastMqa.videoReceive[0].streams[0].receivedHeight\n    );\n    this.localMQEStats.video.RX.requestedKeyFrame.push();\n    this.localMQEStats.video.RX.receivedKeyFrame.push();\n\n    this.localMQEStats.video.TX.packetsLost.push(lastMqa.videoTransmit[0].common.remoteLossRate);\n    this.localMQEStats.video.TX.jitter.push(lastMqa.videoTransmit[0].common.remoteJitter);\n    this.localMQEStats.video.TX.latency.push(lastMqa.videoTransmit[0].common.roundTripTime);\n    this.localMQEStats.video.TX.bitRate.push(\n      lastMqa.videoTransmit[0].streams[0].common.transmittedBitrate\n    );\n    this.localMQEStats.video.TX.frameRate.push(\n      lastMqa.videoTransmit[0].streams[0].common.transmittedFrameRate\n    );\n    this.localMQEStats.video.TX.resolutionWidth.push(\n      lastMqa.videoTransmit[0].streams[0].transmittedWidth\n    );\n    this.localMQEStats.video.TX.resolutionHeight.push(\n      lastMqa.videoTransmit[0].streams[0].transmittedHeight\n    );\n    this.localMQEStats.video.TX.requestedKeyFrame.push(\n      lastMqa.videoTransmit[0].streams[0].requestedKeyFrames\n    );\n    this.localMQEStats.video.TX.receivedKeyFrame.push();\n  }\n\n  resetStatsResults() {\n    this.statsResults.audio.send.meanRemoteJitter = [];\n    this.statsResults.video.send.meanRemoteJitter = [];\n    this.statsResults.share.send.meanRemoteJitter = [];\n\n    this.statsResults.audio.recv.meanRtpJitter = [];\n\n    // TODO: currently no values are present\n    this.statsResults.video.recv.meanRtpJitter = [];\n    this.statsResults.share.recv.meanRtpJitter = [];\n\n    // Reset the roundTripTime\n    this.statsResults.audio.send.meanRoundTripTime = [];\n    this.statsResults.video.send.meanRoundTripTime = [];\n    this.statsResults.share.send.meanRoundTripTime = [];\n  }\n\n  /**\n   * sets mediaStatus status for analyzing metrics\n   *\n   * @public\n   * @param {Object} status for the audio and video\n   * @memberof StatsAnalyzer\n   * @returns {void}\n   */\n  public updateMediaStatus(status: object) {\n    this.meetingMediaStatus = status;\n  }\n\n  /**\n   * captures MQA data from peerconnection\n   *\n   * @public\n   * @memberof StatsAnalyzer\n   * @returns {void}\n   */\n  public sendMqaData() {\n    const audioReceiver = mqaData.intervals[0].audioReceive[0];\n    const audioSender = mqaData.intervals[0].audioTransmit[0];\n    const videoReceiver = mqaData.intervals[0].videoReceive[0];\n    const videoSender = mqaData.intervals[0].videoTransmit[0];\n    const shareSender = mqaData.intervals[0].videoTransmit[1];\n    const shareReceiver = mqaData.intervals[0].videoReceive[1];\n\n    getAudioSenderMqa({\n      audioSender,\n      statsResults: this.statsResults,\n      lastMqaDataSent: this.lastMqaDataSent,\n    });\n    getAudioReceiverMqa({\n      audioReceiver,\n      statsResults: this.statsResults,\n      lastMqaDataSent: this.lastMqaDataSent,\n    });\n\n    getVideoReceiverMqa({\n      videoReceiver,\n      statsResults: this.statsResults,\n      lastMqaDataSent: this.lastMqaDataSent,\n    });\n    getVideoSenderMqa({\n      videoSender,\n      statsResults: this.statsResults,\n      lastMqaDataSent: this.lastMqaDataSent,\n    });\n\n    // Capture mqa for share scenario\n\n    getVideoSenderMqa({\n      videoSender: shareSender,\n      statsResults: this.statsResults,\n      lastMqaDataSent: this.lastMqaDataSent,\n      isShareStream: true,\n    });\n\n    getVideoReceiverMqa({\n      videoReceiver: shareReceiver,\n      statsResults: this.statsResults,\n      lastMqaDataSent: this.lastMqaDataSent,\n      isShareStream: true,\n    });\n    mqaData.intervals[0].intervalMetadata.peerReflexiveIP =\n      this.statsResults.connectionType.local.ipAddress[0];\n\n    // Adding peripheral information\n    mqaData.intervals[0].intervalMetadata.peripherals = [];\n    mqaData.intervals[0].intervalMetadata.peripherals.push({\n      information: _UNKNOWN_,\n      name: MEDIA_DEVICES.SPEAKER,\n    });\n    mqaData.intervals[0].intervalMetadata.peripherals.push({\n      information: this.peerConnection?.audioTransceiver?.sender?.track?.label || _UNKNOWN_,\n      name: MEDIA_DEVICES.MICROPHONE,\n    });\n    mqaData.intervals[0].intervalMetadata.peripherals.push({\n      information: this.peerConnection?.videoTransceiver?.sender?.track?.label || _UNKNOWN_,\n      name: MEDIA_DEVICES.CAMERA,\n    });\n\n    // @ts-ignore\n    mqaData.networkType = this.statsResults.connectionType.local.networkType;\n\n    this.mqaSentCount += 1;\n\n    mqaData.intervals[0].intervalNumber = this.mqaSentCount;\n\n    // DO Deep copy, for some reason it takes the reference all the time rather then old value set\n    this.lastMqaDataSent = cloneDeep(this.statsResults);\n\n    this.populateResults(mqaData.intervals[0]);\n\n    this.resetStatsResults();\n\n    this.emit(\n      {\n        file: 'statsAnalyzer',\n        function: 'sendMqaData',\n      },\n      EVENTS.MEDIA_QUALITY,\n      {\n        data: mqaData.intervals[0],\n        // @ts-ignore\n        networkType: mqaData.networkType,\n      }\n    );\n  }\n\n  /**\n   * updated the peerconnection when changed\n   *\n   * @private\n   * @memberof updatePeerconnection\n   * @param {PeerConnection} peerConnection\n   * @returns {void}\n   */\n  updatePeerconnection(peerConnection: any) {\n    this.peerConnection = peerConnection;\n  }\n\n  /**\n   * Starts the stats analyzer on interval\n   *\n   * @public\n   * @memberof StatsAnalyzer\n   * @param {PeerConnection} peerConnection\n   * @returns {Promise}\n   */\n  public startAnalyzer(peerConnection: any) {\n    if (!this.statsStarted) {\n      this.statsStarted = true;\n      this.peerConnection = peerConnection;\n\n      return this.getStatsAndParse().then(() => {\n        this.statsInterval = setInterval(() => {\n          this.getStatsAndParse();\n        }, this.config.analyzerInterval);\n        // Trigger initial fetch\n        this.sendMqaData();\n        this.mqaInterval = setInterval(() => {\n          this.sendMqaData();\n        }, MQA_INTEVAL);\n      });\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Cleans up the analyzer when done\n   *\n   * @public\n   * @memberof StatsAnalyzer\n   * @returns {void}\n   */\n  public stopAnalyzer() {\n    const sendOneLastMqa = this.mqaInterval && this.statsInterval;\n\n    if (this.statsInterval) {\n      clearInterval(this.statsInterval);\n      this.statsInterval = undefined;\n    }\n\n    if (this.mqaInterval) {\n      clearInterval(this.mqaInterval);\n      this.mqaInterval = undefined;\n    }\n\n    if (sendOneLastMqa) {\n      return this.getStatsAndParse().then(() => {\n        this.sendMqaData();\n        this.peerConnection = null;\n      });\n    }\n    this.peerConnection = null;\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Parse a single result of get stats\n   *\n   * @private\n   * @param {*} getStatsResult\n   * @param {String} type\n   * @param {boolean} isSender\n   * @returns {void}\n   * @memberof StatsAnalyzer\n   */\n  private parseGetStatsResult(getStatsResult: any, type: string, isSender: boolean) {\n    if (!getStatsResult) {\n      return;\n    }\n\n    switch (getStatsResult.type) {\n      case 'outbound-rtp':\n        this.processOutboundRTPResult(getStatsResult, type);\n        break;\n      case 'inbound-rtp':\n        this.processInboundRTPResult(getStatsResult, type);\n        break;\n      case 'track':\n        this.processTrackResult(getStatsResult, type);\n        break;\n      case 'remote-inbound-rtp':\n      case 'remote-outbound-rtp':\n        // @ts-ignore\n        this.compareSentAndReceived(getStatsResult, type, isSender);\n        break;\n      case 'remotecandidate':\n      case 'remote-candidate':\n        this.parseCandidate(getStatsResult, type, isSender, true);\n        break;\n      case 'local-candidate':\n        this.parseCandidate(getStatsResult, type, isSender, false);\n        break;\n      case 'media-source':\n        // @ts-ignore\n        this.parseAudioSource(getStatsResult, type);\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Filters the get stats results for types\n   * @private\n   * @param {Array} getStatsResults\n   * @param {String} type\n   * @param {boolean} isSender\n   * @returns {void}\n   */\n  private filterAndParseGetStatsResults(\n    getStatsResults: Array<any>,\n    type: string,\n    isSender: boolean\n  ) {\n    const {types} = DEFAULT_GET_STATS_FILTER;\n\n    getStatsResults.forEach((result) => {\n      if (types.includes(result.type)) {\n        this.parseGetStatsResult(result, type, isSender);\n      }\n    });\n  }\n\n  /**\n   * parse the audio\n   * @param {String} result\n   * @param {boolean} type\n   * @returns {void}\n   */\n  parseAudioSource(result: any, type: any) {\n    if (!result) {\n      return;\n    }\n\n    if (type === STATS.AUDIO_CORRELATE) {\n      this.statsResults[type].send.audioLevel = result.audioLevel;\n      this.statsResults[type].send.totalAudioEnergy = result.totalAudioEnergy;\n    }\n  }\n\n  /**\n   * emits started/stopped events for local/remote media by checking\n   * if given values are increasing or not. The previousValue, currentValue\n   * params can be any numerical value like number of receive packets or\n   * decoded frames, etc.\n   *\n   * @private\n   * @param {string} mediaType\n   * @param {number} previousValue - value to compare\n   * @param {number} currentValue - value to compare (must be same type of value as previousValue)\n   * @param {boolean} isLocal - true if stats are for local media being sent out, false for remote media being received\n   * @memberof StatsAnalyzer\n   * @returns {void}\n   */\n  emitStartStopEvents = (\n    mediaType: string,\n    previousValue: number,\n    currentValue: number,\n    isLocal: boolean\n  ) => {\n    if (mediaType !== 'audio' && mediaType !== 'video' && mediaType !== 'share') {\n      throw new Error(`Unsupported mediaType: ${mediaType}`);\n    }\n\n    // eslint-disable-next-line no-param-reassign\n    if (previousValue === undefined) previousValue = 0;\n    // eslint-disable-next-line no-param-reassign\n    if (currentValue === undefined) currentValue = 0;\n\n    const lastEmittedEvent = isLocal\n      ? this.lastEmittedStartStopEvent[mediaType].local\n      : this.lastEmittedStartStopEvent[mediaType].remote;\n\n    let newEvent;\n\n    if (currentValue - previousValue > 0) {\n      newEvent = isLocal ? EVENTS.LOCAL_MEDIA_STARTED : EVENTS.REMOTE_MEDIA_STARTED;\n    } else if (currentValue === previousValue && currentValue > 0) {\n      newEvent = isLocal ? EVENTS.LOCAL_MEDIA_STOPPED : EVENTS.REMOTE_MEDIA_STOPPED;\n    }\n\n    if (newEvent && lastEmittedEvent !== newEvent) {\n      if (isLocal) {\n        this.lastEmittedStartStopEvent[mediaType].local = newEvent;\n      } else {\n        this.lastEmittedStartStopEvent[mediaType].remote = newEvent;\n      }\n      this.emit(\n        {\n          file: 'statsAnalyzer/index',\n          function: 'compareLastStatsResult',\n        },\n        newEvent,\n        {\n          type: mediaType,\n        }\n      );\n    }\n  };\n\n  /**\n   * compares current and previous stats to check if packets are not sent\n   *\n   * @private\n   * @memberof StatsAnalyzer\n   * @returns {void}\n   */\n  private compareLastStatsResult() {\n    if (this.lastStatsResults !== null && this.meetingMediaStatus) {\n      // compare audio stats sent\n      let mediaType = STATS.AUDIO_CORRELATE;\n      let currentStats = null;\n      let previousStats = null;\n\n      if (this.meetingMediaStatus.expected.sendAudio) {\n        currentStats = this.statsResults[mediaType].send;\n        previousStats = this.lastStatsResults[mediaType].send;\n\n        if (\n          currentStats.totalPacketsSent === previousStats.totalPacketsSent ||\n          currentStats.totalPacketsSent === 0\n        ) {\n          LoggerProxy.logger.info(\n            `StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} RTP packets sent`\n          );\n        } else {\n          if (\n            currentStats.totalAudioEnergy === previousStats.totalAudioEnergy ||\n            currentStats.totalAudioEnergy === 0\n          ) {\n            LoggerProxy.logger.info(\n              `StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} Energy present`\n            );\n          }\n\n          if (currentStats.audioLevel === 0) {\n            LoggerProxy.logger.info(\n              `StatsAnalyzer:index#compareLastStatsResult --> ${mediaType} level is 0 for the user`\n            );\n          }\n        }\n\n        this.emitStartStopEvents(\n          mediaType,\n          previousStats.totalPacketsSent,\n          currentStats.totalPacketsSent,\n          true\n        );\n      }\n\n      if (this.meetingMediaStatus.expected.receiveAudio) {\n        // compare audio stats received\n        currentStats = this.statsResults[mediaType].recv;\n        previousStats = this.lastStatsResults[mediaType].recv;\n\n        if (\n          currentStats.totalPacketsReceived === previousStats.totalPacketsReceived ||\n          currentStats.totalPacketsReceived === 0\n        ) {\n          LoggerProxy.logger.info(\n            `StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} RTP packets received`\n          );\n        } else if (\n          currentStats.totalSamplesReceived === previousStats.totalSamplesReceived ||\n          currentStats.totalSamplesReceived === 0\n        ) {\n          LoggerProxy.logger.info(\n            `StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} samples received`\n          );\n        }\n\n        this.emitStartStopEvents(\n          mediaType,\n          previousStats.totalPacketsReceived,\n          currentStats.totalPacketsReceived,\n          false\n        );\n      }\n\n      mediaType = STATS.VIDEO_CORRELATE;\n      if (this.meetingMediaStatus.expected.sendVideo) {\n        // compare video stats sent\n        currentStats = this.statsResults[mediaType].send;\n        previousStats = this.lastStatsResults[mediaType].send;\n\n        if (\n          currentStats.totalPacketsSent === previousStats.totalPacketsSent ||\n          currentStats.totalPacketsSent === 0\n        ) {\n          LoggerProxy.logger.info(\n            `StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} RTP packets sent`\n          );\n        } else {\n          if (\n            currentStats.framesEncoded === previousStats.framesEncoded ||\n            currentStats.framesEncoded === 0\n          ) {\n            LoggerProxy.logger.info(\n              `StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} Frames Encoded`\n            );\n          }\n\n          if (\n            this.statsResults.resolutions[mediaType].send.framesSent ===\n              this.lastStatsResults.resolutions[mediaType].send.framesSent ||\n            this.statsResults.resolutions[mediaType].send.framesSent === 0\n          ) {\n            LoggerProxy.logger.info(\n              `StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} Frames sent`\n            );\n          }\n        }\n\n        this.emitStartStopEvents(\n          mediaType,\n          previousStats.framesSent,\n          currentStats.framesSent,\n          true\n        );\n      }\n\n      if (this.meetingMediaStatus.expected.receiveVideo) {\n        // compare video stats reveived\n\n        currentStats = this.statsResults[mediaType].recv;\n        previousStats = this.lastStatsResults[mediaType].recv;\n\n        if (\n          currentStats.totalPacketsReceived === previousStats.totalPacketsReceived ||\n          currentStats.totalPacketsReceived === 0\n        ) {\n          LoggerProxy.logger.info(\n            `StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} RTP packets received`\n          );\n        } else {\n          if (\n            this.statsResults.resolutions[mediaType].recv.framesReceived ===\n              this.lastStatsResults.resolutions[mediaType].recv.framesReceived ||\n            this.statsResults.resolutions[mediaType].recv.framesReceived === 0\n          ) {\n            LoggerProxy.logger.info(\n              `StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} frames received`\n            );\n          }\n\n          if (\n            this.statsResults[mediaType].recv.framesDecoded ===\n              this.lastStatsResults[mediaType].recv.framesDecoded ||\n            this.statsResults.resolutions[mediaType].send.framesDecoded === 0\n          ) {\n            LoggerProxy.logger.info(\n              `StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} frames decoded`\n            );\n          }\n\n          if (\n            this.statsResults.resolutions[mediaType].recv.framesDropped -\n              this.lastStatsResults.resolutions[mediaType].recv.framesDropped >\n            10\n          ) {\n            LoggerProxy.logger.info(\n              `StatsAnalyzer:index#compareLastStatsResult --> ${mediaType} frames are getting dropped`\n            );\n          }\n        }\n\n        this.emitStartStopEvents(\n          mediaType,\n          previousStats.framesDecoded,\n          currentStats.framesDecoded,\n          false\n        );\n      }\n\n      mediaType = STATS.SHARE_CORRELATE;\n      if (this.meetingMediaStatus.expected.sendShare) {\n        // compare share stats sent\n\n        currentStats = this.statsResults[mediaType].send;\n        previousStats = this.lastStatsResults[mediaType].send;\n\n        if (\n          currentStats.totalPacketsSent === previousStats.totalPacketsSent ||\n          currentStats.totalPacketsSent === 0\n        ) {\n          LoggerProxy.logger.info(\n            `StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} RTP packets sent`\n          );\n        } else {\n          if (\n            currentStats.framesEncoded === previousStats.framesEncoded ||\n            currentStats.framesEncoded === 0\n          ) {\n            LoggerProxy.logger.info(\n              `StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} frames getting encoded`\n            );\n          }\n\n          if (\n            this.statsResults.resolutions[mediaType].send.framesSent ===\n              this.lastStatsResults.resolutions[mediaType].send.framesSent ||\n            this.statsResults.resolutions[mediaType].send.framesSent === 0\n          ) {\n            LoggerProxy.logger.info(\n              `StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} frames sent`\n            );\n          }\n        }\n\n        // TODO:need to check receive share value\n        // compare share stats reveived\n        currentStats = this.statsResults[mediaType].recv;\n        previousStats = this.lastStatsResults[mediaType].recv;\n\n        if (\n          currentStats.totalPacketsReceived === previousStats.totalPacketsReceived ||\n          currentStats.totalPacketsSent === 0\n        ) {\n          LoggerProxy.logger.info(\n            `StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} RTP packets received`\n          );\n        } else {\n          if (\n            this.statsResults.resolutions[mediaType].recv.framesReceived ===\n              this.lastStatsResults.resolutions[mediaType].recv.framesReceived ||\n            this.statsResults.resolutions[mediaType].recv.framesReceived === 0\n          ) {\n            LoggerProxy.logger.info(\n              `StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} frames received`\n            );\n          }\n\n          if (\n            this.statsResults[mediaType].recv.framesDecoded ===\n              this.lastStatsResults[mediaType].recv.framesDecoded ||\n            this.statsResults.resolutions[mediaType].send.framesDecoded === 0\n          ) {\n            LoggerProxy.logger.info(\n              `StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} frames decoded`\n            );\n          }\n\n          if (\n            this.statsResults.resolutions[mediaType].recv.framesDropped -\n              this.lastStatsResults.resolutions[mediaType].recv.framesDropped >\n            10\n          ) {\n            LoggerProxy.logger.info(\n              `StatsAnalyzer:index#compareLastStatsResult --> ${mediaType} frames are getting dropped`\n            );\n          }\n        }\n\n        // we are not calling emitStartStopEvents() for sending or receiving share because sharing is often started and stopped\n        // in meetings and this.meetingMediaStatus.expected values can be out of sync with the actual packet flow\n        // so we would send \"sharing stopped\" events incorrectly\n      }\n    }\n  }\n\n  /**\n   * Does a `getStats` on all the transceivers and parses the results\n   *\n   * @private\n   * @memberof StatsAnalyzer\n   * @returns {Promise}\n   */\n  private getStatsAndParse() {\n    if (!this.peerConnection) {\n      return Promise.resolve();\n    }\n\n    if (this.peerConnection && this.peerConnection.connectionState === CONNECTION_STATE.FAILED) {\n      LoggerProxy.logger.trace(\n        'StatsAnalyzer:index#getStatsAndParse --> PeerConnection is in failed state'\n      );\n\n      return Promise.resolve();\n    }\n\n    LoggerProxy.logger.trace('StatsAnalyzer:index#getStatsAndParse --> Collecting Stats');\n\n    return Promise.all([\n      this.peerConnection.videoTransceiver.sender.getStats().then((res) => {\n        this.filterAndParseGetStatsResults(res, STATS.VIDEO_CORRELATE, true);\n      }),\n\n      this.peerConnection.videoTransceiver.receiver.getStats().then((res) => {\n        this.filterAndParseGetStatsResults(res, STATS.VIDEO_CORRELATE, false);\n      }),\n\n      this.peerConnection.audioTransceiver.sender.getStats().then((res) => {\n        this.filterAndParseGetStatsResults(res, STATS.AUDIO_CORRELATE, true);\n      }),\n\n      this.peerConnection.audioTransceiver.receiver.getStats().then((res) => {\n        this.filterAndParseGetStatsResults(res, STATS.AUDIO_CORRELATE, false);\n      }),\n\n      // TODO: add checks for screen share\n      this.peerConnection.shareTransceiver.sender.getStats().then((res) => {\n        this.filterAndParseGetStatsResults(res, STATS.SHARE_CORRELATE, true);\n      }),\n\n      this.peerConnection.shareTransceiver.receiver.getStats().then((res) => {\n        this.filterAndParseGetStatsResults(res, STATS.SHARE_CORRELATE, false);\n      }),\n    ]).then(() => {\n      this.statsResults[STATS.AUDIO_CORRELATE].direction =\n        this.peerConnection.audioTransceiver.currentDirection;\n      this.statsResults[STATS.VIDEO_CORRELATE].direction =\n        this.peerConnection.videoTransceiver.currentDirection;\n      this.statsResults[STATS.SHARE_CORRELATE].direction =\n        this.peerConnection.shareTransceiver.currentDirection;\n\n      // Process Stats results every 5 seconds\n      this.compareLastStatsResult();\n\n      // Save the last results to compare with the current\n      this.lastStatsResults = JSON.parse(JSON.stringify(this.statsResults));\n\n      LoggerProxy.logger.trace(\n        'StatsAnalyzer:index#getStatsAndParse --> Finished Collecting Stats'\n      );\n    });\n  }\n\n  /**\n   * Processes OutboundRTP stats result and stores\n   * @private\n   * @param {*} result\n   * @param {*} type\n   * @returns {void}\n   */\n  private processOutboundRTPResult(result: any, type: any) {\n    const mediaType = type || STATS.AUDIO_CORRELATE;\n    const sendrecvType = STATS.SEND_DIRECTION;\n\n    if (result.bytesSent) {\n      let kilobytes = 0;\n\n      if (!this.statsResults.internal[mediaType][sendrecvType].prevBytesSent) {\n        this.statsResults.internal[mediaType][sendrecvType].prevBytesSent = result.bytesSent;\n      }\n      if (!this.statsResults.internal[mediaType][sendrecvType].framesEncoded) {\n        this.statsResults.internal[mediaType][sendrecvType].framesEncoded = result.framesEncoded;\n      }\n      if (!this.statsResults.internal[mediaType][sendrecvType].keyFramesEncoded) {\n        this.statsResults.internal[mediaType][sendrecvType].keyFramesEncoded =\n          result.keyFramesEncoded;\n      }\n\n      const bytes =\n        result.bytesSent - this.statsResults.internal[mediaType][sendrecvType].prevBytesSent;\n\n      this.statsResults.internal[mediaType][sendrecvType].prevBytesSent = result.bytesSent;\n\n      kilobytes = bytes / 1024;\n\n      this.statsResults[mediaType][sendrecvType].availableBandwidth = kilobytes.toFixed(1);\n      this.statsResults[mediaType].bytesSent = kilobytes;\n\n      this.statsResults[mediaType][sendrecvType].framesEncoded =\n        result.framesEncoded - this.statsResults.internal[mediaType][sendrecvType].framesEncoded;\n      this.statsResults[mediaType][sendrecvType].keyFramesEncoded =\n        result.keyFramesEncoded -\n        this.statsResults.internal[mediaType][sendrecvType].keyFramesEncoded;\n      this.statsResults.internal[mediaType].outboundRtpId = result.id;\n\n      if (!this.statsResults.internal[mediaType][sendrecvType].packetsSent) {\n        this.statsResults.internal[mediaType][sendrecvType].packetsSent = result.packetsSent;\n      }\n\n      this.statsResults[mediaType][sendrecvType].packetsSent =\n        result.packetsSent - this.statsResults.internal[mediaType][sendrecvType].packetsSent;\n      this.statsResults.internal[mediaType][sendrecvType].packetsSent = result.packetsSent;\n\n      // Data saved to send MQA metrics\n\n      this.statsResults[mediaType][sendrecvType].totalKeyFramesEncoded = result.keyFramesEncoded;\n      this.statsResults[mediaType][sendrecvType].totalNackCount = result.nackCount;\n      this.statsResults[mediaType][sendrecvType].totalPliCount = result.pliCount;\n      this.statsResults[mediaType][sendrecvType].totalPacketsSent = result.packetsSent;\n      this.statsResults[mediaType][sendrecvType].totalFirCount = result.firCount;\n      this.statsResults[mediaType][sendrecvType].framesSent = result.framesSent;\n      this.statsResults[mediaType][sendrecvType].framesEncoded = result.framesEncoded;\n      this.statsResults[mediaType][sendrecvType].encoderImplementation =\n        result.encoderImplementation;\n      this.statsResults[mediaType][sendrecvType].qualityLimitationReason =\n        result.qualityLimitationReason;\n      this.statsResults[mediaType][sendrecvType].qualityLimitationResolutionChanges =\n        result.qualityLimitationResolutionChanges;\n      this.statsResults[mediaType][sendrecvType].retransmittedPacketsSent =\n        result.retransmittedPacketsSent;\n      this.statsResults[mediaType][sendrecvType].totalBytesSent = result.bytesSent;\n      this.statsResults[mediaType][sendrecvType].headerBytesSent = result.headerBytesSent;\n      this.statsResults[mediaType][sendrecvType].retransmittedBytesSent =\n        result.retransmittedBytesSent;\n    }\n  }\n\n  /**\n   * Processes InboundRTP stats result and stores\n   * @private\n   * @param {*} result\n   * @param {*} type\n   * @returns {void}\n   */\n  private processInboundRTPResult(result: any, type: any) {\n    const mediaType = type || STATS.AUDIO_CORRELATE;\n    const sendrecvType = STATS.RECEIVE_DIRECTION;\n\n    if (result.bytesReceived) {\n      let kilobytes = 0;\n\n      if (!this.statsResults.internal[mediaType][sendrecvType].prevBytesReceived) {\n        this.statsResults.internal[mediaType][sendrecvType].prevBytesReceived =\n          result.bytesReceived;\n      }\n\n      if (!this.statsResults.internal[mediaType][sendrecvType].pliCount) {\n        this.statsResults.internal[mediaType][sendrecvType].pliCount = result.pliCount;\n      }\n\n      if (!this.statsResults.internal[mediaType][sendrecvType].packetsLost) {\n        this.statsResults.internal[mediaType][sendrecvType].packetsLost = result.packetsLost;\n      }\n\n      if (!this.statsResults.internal[mediaType][sendrecvType].totalPacketsReceived) {\n        this.statsResults.internal[mediaType][sendrecvType].totalPacketsReceived =\n          result.packetsReceived;\n      }\n\n      if (!this.statsResults.internal[mediaType][sendrecvType].lastPacketReceivedTimestamp) {\n        this.statsResults.internal[mediaType][sendrecvType].lastPacketReceivedTimestamp =\n          result.lastPacketReceivedTimestamp;\n      }\n\n      const bytes =\n        result.bytesReceived -\n        this.statsResults.internal[mediaType][sendrecvType].prevBytesReceived;\n\n      this.statsResults.internal[mediaType][sendrecvType].prevBytesReceived = result.bytesReceived;\n\n      kilobytes = bytes / 1024;\n      this.statsResults[mediaType][sendrecvType].availableBandwidth = kilobytes.toFixed(1);\n      this.statsResults[mediaType].bytesReceived = kilobytes.toFixed(1);\n\n      this.statsResults[mediaType][sendrecvType].pliCount =\n        result.pliCount - this.statsResults.internal[mediaType][sendrecvType].pliCount;\n      this.statsResults[mediaType][sendrecvType].currentPacketsLost =\n        result.packetsLost - this.statsResults.internal[mediaType][sendrecvType].packetsLost;\n      if (this.statsResults[mediaType][sendrecvType].currentPacketsLost < 0) {\n        this.statsResults[mediaType][sendrecvType].currentPacketsLost = 0;\n      }\n\n      this.statsResults[mediaType][sendrecvType].packetsReceived =\n        result.packetsReceived -\n        this.statsResults.internal[mediaType][sendrecvType].totalPacketsReceived;\n      this.statsResults.internal[mediaType][sendrecvType].totalPacketsReceived =\n        result.packetsReceived;\n\n      if (this.statsResults[mediaType][sendrecvType].packetsReceived === 0) {\n        LoggerProxy.logger.info(\n          `StatsAnalyzer:index#processInboundRTPResult --> No packets received for ${mediaType} `,\n          this.statsResults[mediaType][sendrecvType].packetsReceived\n        );\n      }\n\n      //  Check the over all packet Lost ratio\n      this.statsResults[mediaType][sendrecvType].currentPacketLossRatio =\n        this.statsResults[mediaType][sendrecvType].currentPacketsLost > 0\n          ? this.statsResults[mediaType][sendrecvType].currentPacketsLost /\n            (this.statsResults[mediaType][sendrecvType].packetsReceived +\n              this.statsResults[mediaType][sendrecvType].currentPacketsLost)\n          : 0;\n      if (this.statsResults[mediaType][sendrecvType].currentPacketLossRatio > 3) {\n        LoggerProxy.logger.info(\n          'StatsAnalyzer:index#processInboundRTPResult --> Packets getting lost from the receiver ',\n          this.statsResults[mediaType][sendrecvType].currentPacketLossRatio\n        );\n      }\n\n      // TODO: check the packet loss value is negative values here\n\n      if (result.packetsLost) {\n        this.statsResults[mediaType][sendrecvType].totalPacketsLost =\n          result.packetsLost > 0 ? result.packetsLost : -result.packetsLost;\n      } else {\n        this.statsResults[mediaType][sendrecvType].totalPacketsLost = 0;\n      }\n\n      this.statsResults[mediaType][sendrecvType].lastPacketReceivedTimestamp =\n        result.lastPacketReceivedTimestamp;\n\n      // From Thin\n      this.statsResults[mediaType][sendrecvType].totalNackCount = result.nackCount;\n      this.statsResults[mediaType][sendrecvType].totalPliCount = result.pliCount;\n      this.statsResults[mediaType][sendrecvType].framesDecoded = result.framesDecoded;\n      this.statsResults[mediaType][sendrecvType].keyFramesDecoded = result.keyFramesDecoded;\n\n      this.statsResults[mediaType][sendrecvType].decoderImplementation =\n        result.decoderImplementation;\n      this.statsResults[mediaType][sendrecvType].totalPacketsReceived = result.packetsReceived;\n\n      this.statsResults[mediaType][sendrecvType].fecPacketsDiscarded = result.fecPacketsDiscarded;\n      this.statsResults[mediaType][sendrecvType].fecPacketsReceived = result.fecPacketsReceived;\n      this.statsResults[mediaType][sendrecvType].totalBytesReceived = result.bytesReceived;\n      this.statsResults[mediaType][sendrecvType].headerBytesReceived = result.headerBytesReceived;\n\n      this.statsResults[mediaType][sendrecvType].meanRtpJitter.push(result.jitter);\n\n      // Audio stats\n\n      this.statsResults[mediaType][sendrecvType].audioLevel = result.audioLevel;\n      this.statsResults[mediaType][sendrecvType].totalAudioEnergy = result.totalAudioEnergy;\n      this.statsResults[mediaType][sendrecvType].totalSamplesReceived =\n        result.totalSamplesReceived || 0;\n      this.statsResults[mediaType][sendrecvType].totalSamplesDecoded =\n        result.totalSamplesDecoded || 0;\n      this.statsResults[mediaType][sendrecvType].concealedSamples = result.concealedSamples || 0;\n    }\n  }\n\n  /**\n   * Processes remote and local candidate result and stores\n   * @private\n   * @param {*} result\n   * @param {*} type\n   * @param {boolean} isSender\n   * @param {boolean} isRemote\n   *\n   * @returns {void}\n   */\n  parseCandidate = (result: any, type: any, isSender: boolean, isRemote: boolean) => {\n    if (!result || !result.id) {\n      return;\n    }\n    const RemoteCandidateType = {};\n    const RemoteTransport = {};\n    const RemoteIpAddress = {};\n    const RemoteNetworkType = {};\n\n    if (!result.id) return;\n\n    const sendRecvType = isSender ? STATS.SEND_DIRECTION : STATS.RECEIVE_DIRECTION;\n    const ipType = isRemote ? STATS.REMOTE : STATS.LOCAL;\n\n    if (!RemoteCandidateType[result.id]) {\n      RemoteCandidateType[result.id] = [];\n    }\n\n    if (!RemoteTransport[result.id]) {\n      RemoteTransport[result.id] = [];\n    }\n\n    if (!RemoteIpAddress[result.id]) {\n      RemoteIpAddress[result.id] = [];\n    }\n    if (!RemoteNetworkType[result.id]) {\n      RemoteNetworkType[result.id] = [];\n    }\n\n    if (\n      result.candidateType &&\n      RemoteCandidateType[result.id].indexOf(result.candidateType) === -1\n    ) {\n      RemoteCandidateType[result.id].push(result.candidateType);\n    }\n\n    if (result.protocol && RemoteTransport[result.id].indexOf(result.protocol) === -1) {\n      RemoteTransport[result.id].push(result.protocol.toUpperCase());\n    }\n\n    if (\n      result.ip &&\n      RemoteIpAddress[result.id].indexOf(`${result.ip}:${result.portNumber}`) === -1\n    ) {\n      RemoteIpAddress[result.id].push(`${result.ip}`); // TODO: Add ports\n    }\n\n    if (result.networkType && RemoteNetworkType[result.id].indexOf(result.networkType) === -1) {\n      RemoteNetworkType[result.id].push(result.networkType);\n    }\n\n    this.statsResults.internal.candidates[result.id] = {\n      candidateType: RemoteCandidateType[result.id],\n      ipAddress: RemoteIpAddress[result.id],\n      portNumber: result.port,\n      networkType: RemoteNetworkType[result.id],\n      priority: result.priority,\n      transport: RemoteTransport[result.id],\n      timestamp: result.time,\n      id: result.id,\n      type: result.type,\n    };\n\n    this.statsResults.connectionType[ipType].candidateType = RemoteCandidateType[result.id];\n    this.statsResults.connectionType[ipType].ipAddress = RemoteIpAddress[result.id];\n\n    this.statsResults.connectionType[ipType].networkType =\n      RemoteNetworkType[result.id][0] === NETWORK_TYPE.VPN\n        ? NETWORK_TYPE.UNKNOWN\n        : RemoteNetworkType[result.id][0];\n    this.statsResults.connectionType[ipType].transport = RemoteTransport[result.id];\n\n    this.statsResults[type][sendRecvType].totalRoundTripTime = result.totalRoundTripTime;\n  };\n\n  /**\n   * Process Track results\n   *\n   * @private\n   * @param {*} result\n   * @param {*} mediaType\n   * @returns {void}\n   * @memberof StatsAnalyzer\n   */\n  private processTrackResult(result: any, mediaType: any) {\n    if (!result || result.type !== 'track') {\n      return;\n    }\n    if (result.type !== 'track') return;\n\n    const sendrecvType =\n      result.remoteSource === true ? STATS.RECEIVE_DIRECTION : STATS.SEND_DIRECTION;\n\n    if (result.frameWidth && result.frameHeight) {\n      this.statsResults.resolutions[mediaType][sendrecvType].width = result.frameWidth;\n      this.statsResults.resolutions[mediaType][sendrecvType].height = result.frameHeight;\n      this.statsResults.resolutions[mediaType][sendrecvType].framesSent = result.framesSent;\n      this.statsResults.resolutions[mediaType][sendrecvType].hugeFramesSent = result.hugeFramesSent;\n    }\n\n    if (sendrecvType === STATS.RECEIVE_DIRECTION) {\n      this.statsResults.resolutions[mediaType][sendrecvType].framesReceived = result.framesReceived;\n      this.statsResults.resolutions[mediaType][sendrecvType].framesDecoded = result.framesDecoded;\n      this.statsResults.resolutions[mediaType][sendrecvType].framesDropped = result.framesDropped;\n    }\n\n    if (result.trackIdentifier && mediaType !== STATS.AUDIO_CORRELATE) {\n      this.statsResults.resolutions[mediaType][sendrecvType].trackIdentifier =\n        result.trackIdentifier;\n\n      const jitterBufferDelay = result && result.jitterBufferDelay;\n      const jitterBufferEmittedCount = result && result.jitterBufferEmittedCount;\n\n      this.statsResults.resolutions[mediaType][sendrecvType].avgJitterDelay =\n        jitterBufferEmittedCount && +jitterBufferDelay / +jitterBufferEmittedCount;\n\n      // Used to calculate the jitter\n      this.statsResults.resolutions[mediaType][sendrecvType].jitterBufferDelay =\n        result.jitterBufferDelay;\n      this.statsResults.resolutions[mediaType][sendrecvType].jitterBufferEmittedCount =\n        result.jitterBufferEmittedCount;\n    }\n  }\n\n  /**\n   *\n   * @private\n   * @param {*} result\n   * @param {*} type\n   * @returns {void}\n   * @memberof StatsAnalyzer\n   */\n  private compareSentAndReceived(result: any, type: any) {\n    if (!type) {\n      return;\n    }\n\n    const mediaType = type;\n\n    if (!this.statsResults.internal[mediaType].send.totalPacketsLostOnReceiver) {\n      this.statsResults.internal[mediaType].send.totalPacketsLostOnReceiver = result.packetsLost;\n    }\n\n    const currentPacketLoss =\n      result.packetsLost - this.statsResults.internal[mediaType].send.totalPacketsLostOnReceiver;\n\n    this.statsResults.internal[mediaType].send.totalPacketsLostOnReceiver = result.packetsLost;\n    this.statsResults[mediaType].send.packetsLostOnReceiver = currentPacketLoss;\n    this.statsResults[mediaType].send.totalPacketsLostOnReceiver = result.packetsLost;\n\n    this.statsResults[mediaType].send.meanRemoteJitter.push(result.jitter);\n    this.statsResults[mediaType].send.meanRoundTripTime.push(result.roundTripTime);\n\n    this.statsResults[mediaType].send.timestamp = result.timestamp;\n    this.statsResults[mediaType].send.ssrc = result.ssrc;\n    this.statsResults[mediaType].send.reportsReceived = result.reportsReceived;\n\n    // Total packloss ratio on this video section of the call\n    this.statsResults[mediaType].send.overAllPacketLossRatio =\n      this.statsResults[mediaType].send.totalPacketsLostOnReceiver > 0\n        ? this.statsResults[mediaType].send.totalPacketsLostOnReceiver /\n          this.statsResults[mediaType].send.totalPacketsSent\n        : 0;\n    this.statsResults[mediaType].send.currentPacketLossRatio =\n      this.statsResults[mediaType].send.packetsLostOnReceiver > 0\n        ? (this.statsResults[mediaType].send.packetsLostOnReceiver * 100) /\n          (this.statsResults[mediaType].send.packetsSent +\n            this.statsResults[mediaType].send.packetsLostOnReceiver)\n        : 0;\n\n    if (\n      this.statsResults[mediaType].send.maxPacketLossRatio <\n      this.statsResults[mediaType].send.currentPacketLossRatio\n    ) {\n      this.statsResults[mediaType].send.maxPacketLossRatio =\n        this.statsResults[mediaType].send.currentPacketLossRatio;\n    }\n\n    if (result.type === 'remote-inbound-rtp') {\n      this.networkQualityMonitor.determineUplinkNetworkQuality({\n        mediaType,\n        remoteRtpResults: result,\n        statsAnalyzerCurrentStats: this.statsResults,\n      });\n    }\n  }\n}\n"],"mappings":"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"}